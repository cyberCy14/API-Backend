<?php

namespace App\Filament\Pages\Schema;

use App\Traits\HasRoleHelpers;
use App\Filament\Pages\Concerns\HandlesCompanyAccess;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Components\Actions;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Tabs;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Get;
use App\Models\LoyaltyProgram;
use Illuminate\Support\Facades\Auth;

class PointCalculatorSchema
{
    use HasRoleHelpers, HandlesCompanyAccess;

    public static function getSchema($livewire): array
    {
        $user = Auth::user();
        $companyOptions = (new static())->getCompanyOptions($user);

        $isHandler = $livewire->isHandler($user);

        return [
            Tabs::make('calculator_tabs')
                ->activeTab(1)
                ->tabs([
                    self::getEarnPointsTab($livewire, $companyOptions, $isHandler),
                    self::getCustomerLookupTab($livewire, $companyOptions, $isHandler),
                    self::getRedeemPointsTab($livewire, $companyOptions, $isHandler),
                ])
                ->live(),
        ];
    }

    private static function getEarnPointsTab($livewire, $companyOptions, $isHandler): Tabs\Tab
    {
        return Tabs\Tab::make('earn_points')
            ->label('Earn Points')
            ->icon('heroicon-o-plus-circle')
            ->schema([
                Section::make('Select Company & Program')
                    ->schema([
                        Select::make('company_id')
                            ->label('Company')
                            ->options($companyOptions)
                            ->required()
                            ->live()
                            ->disabled($isHandler && count($companyOptions) === 1)
                            ->helperText($isHandler ? 'You can only manage loyalty programs for your assigned companies' : null)
                            ->afterStateUpdated(function ($state, callable $set) use ($livewire) {
                                if (!$livewire->validateCompanyAccess($state)) {
                                    $set('company_id', null);
                                    return;
                                }
                                
                                $set('loyalty_program_id', null);
                                $livewire->resetCalculation();
                            }),

                        Select::make('loyalty_program_id')
                            ->label('Loyalty Program')
                            ->options(function (Get $get) use ($livewire) {
                                $companyId = $get('company_id');
                                if (!$companyId || !$livewire->canAccessCompany($companyId)) {
                                    return [];
                                }

                                return LoyaltyProgram::where('company_id', $companyId)
                                    ->whereHas('rules', fn($query) => $query->where('is_active', true))
                                    ->where('is_active', true)
                                    ->pluck('program_name', 'id');
                            })
                            ->required()
                            ->live()
                            ->afterStateUpdated(fn () => $livewire->resetCalculation())
                            ->disabled(fn (Get $get): bool => !$get('company_id'))
                            ->helperText('Only programs with active rules are shown'),
                    ])
                    ->columns(2),

                Section::make('Purchase Details')
                    ->schema([
                        TextInput::make('purchase_amount')
                            ->label('Purchase Amount')
                            ->prefix('PHP')
                            ->numeric()
                            ->minValue(0.01)
                            ->step(0.01)
                            ->required()
                            ->live(onBlur: true)
                            ->afterStateUpdated(fn () => $livewire->resetCalculation()),

                        TextInput::make('customer_id')
                            ->label('Customer ID')
                            ->helperText('Enter Customer ID (optional if email is provided)')
                            ->live(onBlur: true)
                            ->afterStateUpdated(function () use ($livewire) {
                                $livewire->fetchCustomerEmail();
                                $livewire->resetCalculation();
                            }),

                        Placeholder::make('customer_email_display')
                            ->label('Customer Email')
                            ->content(fn ($get, $livewire): string =>
                                $livewire->customerEmailDisplay ?? 'Enter Customer ID to see email'
                            )
                            ->visible(fn ($get): bool => !empty($get('customer_id'))),

                        TextInput::make('customer_email')
                            ->label('Or Enter Customer Email Manually')
                            ->email()
                            ->helperText('Points will be credited to this customer (optional if Customer ID is provided)')
                            ->live(onBlur: true)
                            ->afterStateUpdated(fn () => $livewire->resetCalculation()),
                    ])
                    ->columns(2),

                Section::make('Calculation Results')
                    ->schema([
                        Placeholder::make('calculated_points')
                            ->label('Total Points Earned')
                            ->content(fn ($get, $livewire): string =>
                                $livewire->calculatedPoints ?? 'Click "Calculate Points" to see results'
                            )
                            ->extraAttributes([
                                'class' => 'text-2xl font-bold text-green-600'
                            ]),

                        Placeholder::make('rule_breakdown')
                            ->label('Points Breakdown')
                            ->content(fn ($get, $livewire): string => 
                                empty($livewire->ruleBreakdown)
                                    ? 'No calculation performed yet'
                                    : collect($livewire->ruleBreakdown)
                                        ->map(fn ($rule) => "• {$rule['rule_name']}: {$rule['points']} points")
                                        ->implode("\n")
                            ),
                    ])
                    ->columns(2)
                    ->visible(fn ($get, $livewire): bool => !empty($livewire->calculatedPoints)),

                Actions::make([
                    Action::make('calculate')
                        ->label('Calculate Points')
                        ->icon('heroicon-o-calculator')
                        ->color('primary')
                        ->action('calculatePoints')
                        ->disabled(fn (Get $get): bool =>
                            empty($get('company_id')) ||
                            empty($get('loyalty_program_id')) ||
                            empty($get('purchase_amount')) ||
                            (empty($get('customer_id')) && empty($get('customer_email')))
                        ),

                    Action::make('generate_qr')
                        ->label('Generate QR Code & Credit Points')
                        ->icon('heroicon-o-qr-code')
                        ->color('success')
                        ->action('generateQrAndCreditPoints')
                        ->visible(fn ($get, $livewire): bool => !empty($livewire->calculatedPoints))
                        ->requiresConfirmation()
                        ->modalHeading('Credit Points to Customer')
                        ->modalDescription('This will generate a QR code. Scanning it will credit the points to the customer account.'),
                ])->alignEnd(),
            ]);
    }

    private static function getCustomerLookupTab($livewire, $companyOptions, $isHandler): Tabs\Tab
    {
        return Tabs\Tab::make('customer_lookup')
            ->label('Customer Lookup')
            ->icon('heroicon-o-magnifying-glass')
            ->schema([
                Section::make('Search Customer')
                    ->schema([
                        Select::make('search_company_id')
                            ->label('Company')
                            ->options($companyOptions)
                            ->required()
                            ->disabled($isHandler && count($companyOptions) === 1)
                            ->helperText($isHandler ? 'You can only search customers from your assigned companies' : null)
                            ->live()
                            ->afterStateUpdated(function ($state) use ($livewire) {
                                if (!$livewire->validateCompanyAccess($state)) {
                                    return;
                                }
                                $livewire->resetCustomerData();
                            }),

                        TextInput::make('search_customer_id')
                            ->label('Customer ID')
                            ->helperText('Enter Customer ID (optional if email is provided)')
                            ->live(onBlur: true)
                            ->afterStateUpdated(function () use ($livewire) {
                                $livewire->fetchLookupCustomerEmail();
                            }),

                        Placeholder::make('search_customer_email_display')
                            ->label('Customer Email')
                            ->content(fn ($get, $livewire): string =>
                                $livewire->customerEmailDisplay ?? 'Enter Customer ID to see email'
                            )
                            ->visible(fn ($get): bool => !empty($get('search_customer_id'))),

                        TextInput::make('search_customer_email')
                            ->label('Customer Email')
                            ->email()
                            ->helperText('Enter customer email (optional if Customer ID is provided)'),
                    ])
                    ->columns(2),

                Section::make('Customer Information')
                    ->schema([
                        // Placeholder::make('customer_balance')
                        //     ->label('Current Points Balance')
                        //     ->content(fn ($get, $livewire): string =>
                        //         $livewire->customerBalance !== null
                        //             ? number_format($livewire->customerBalance) . ' points'
                        //             : 'Search for a customer to see their balance'
                        //     )
                        Placeholder::make('customer_balance')
                            ->label('Current Points Balance')
                            ->content(fn ($get, $livewire): string => 
                                !empty($livewire->customerTransactions)
                                    ? number_format(collect($livewire->customerTransactions)->sum('balance')) . ' points'
                                    : 'Search for a customer to see their balance'
                            )

                            ->extraAttributes([
                                'class' => 'text-2xl font-bold text-blue-600'
                            ]),

                        Placeholder::make('transaction_count')
                            ->label('Total Transactions')
                            ->content(fn ($get, $livewire) =>
                                !empty($livewire->customerTransactions)
                                    ? count($livewire->customerTransactions) . ' transactions'
                                    : 'No transactions found'
                            ),
                    ])
                    ->columns(2)
                    ->visible(fn ($get, $livewire): bool => $livewire->customerBalance !== null),

                Actions::make([
                    Action::make('search_customer')
                        ->label('Search Customer')
                        ->icon('heroicon-o-magnifying-glass')
                        ->color('info')
                        ->action('searchCustomer')
                        ->disabled(fn (Get $get): bool =>
                            empty($get('search_company_id')) ||
                            (empty($get('search_customer_id')) && empty($get('search_customer_email')))
                        ),
                ])->alignEnd(),
            ]);
    }

    private static function getRedeemPointsTab($livewire, $companyOptions, $isHandler): Tabs\Tab
    {
        return Tabs\Tab::make('redeem_points')
            ->label('Redeem Points')
            ->icon('heroicon-o-minus-circle')
            ->schema([
                Section::make('Redemption Details')
                    ->schema([
                        Select::make('redeem_company_id')
                            ->label('Company')
                            ->options($companyOptions)
                            ->required()
                            ->disabled($isHandler && count($companyOptions) === 1)
                            ->helperText($isHandler ? 'You can only redeem points for your assigned companies' : null)
                            ->live()
                            ->afterStateUpdated(function ($state, callable $set) use ($livewire) {
                                if ($livewire->validateCompanyAccess($state)) {
                                    $livewire->resetRedemptionData();
                                    $set('loyalty_program_id_redeem', null);
                                    $set('reward_id', null);
                                    $set('redeem_points', null);
                                    $set('redemption_description', null);
                                }
                            }),

                            Select::make('loyalty_program_id_redeem')
                            ->label('Loyalty Program')
                            ->options(function (Get $get) use ($livewire) {
                                $companyId = $get('redeem_company_id');
                                if (!$companyId || !$livewire->canAccessCompany($companyId)) {
                                    return [];
                                }
                        
                                // Fixed SQL query with qualified columns to avoid ambiguity
                                return LoyaltyProgram::where('company_id', $companyId)
                                    ->where('loyalty_programs.is_active', true)
                                    ->whereHas('rewards', function ($query) {
                                        $query->where('loyalty_rewards.is_active', true)
                                              ->where('loyalty_program_rules.is_active', true);
                                    })
                                    ->pluck('program_name', 'id');
                            })  
                            ->required()
                            ->live()  // <-- Now correctly chained to Select (or ->reactive() if on Filament v2)
                            ->afterStateUpdated(function (callable $set) {
                                $set('reward_id', null);
                                $set('redeem_points', null);
                                $set('redemption_description', null);
                            })
                            ->disabled(fn (Get $get): bool => !$get('redeem_company_id'))
                            ->helperText('Only programs with active rewards are shown'),
                        

                        TextInput::make('redeem_customer_id')
                            ->label('Customer ID')
                            ->helperText('Enter Customer ID (optional if email is provided)')
                            ->live(onBlur: true)
                            ->afterStateUpdated(function () use ($livewire) {
                                $livewire->fetchRedemptionCustomerEmail();
                            }),

                        Placeholder::make('redeem_customer_email_display')
                            ->label('Customer Email')
                            ->content(fn ($get, $livewire): string =>
                                $livewire->redemptionCustomerEmailDisplay ?? 'Enter Customer ID to see email'
                            )
                            ->visible(fn ($get): bool => !empty($get('redeem_customer_id'))),

                        TextInput::make('redeem_customer_email')
                            ->label('Customer Email')
                            ->email()
                            ->helperText('Enter customer email (optional if Customer ID is provided)'),
                    ])
                    ->columns(2),

                Section::make('Redemption Options')
                    ->schema([
                        Select::make('reward_id')
                            ->label('Select Reward (Optional)')
                            ->placeholder('Choose a predefined reward or leave blank for manual entry')
                            ->options(function (Get $get) use ($livewire) {
                                $programId = $get('loyalty_program_id_redeem');
                                if (!$programId) {
                                    return [];
                                }

                                return \App\Models\LoyaltyReward::whereHas('loyaltyProgramRule', function ($query) use ($programId) {
                                    $query->where('loyalty_program_id', $programId);
                                })
                                ->where('is_active', true)
                                ->get()
                                ->mapWithKeys(function ($reward) {
                                    return [$reward->id => $reward->reward_name . ' (' . number_format($reward->point_cost) . ' points)'];
                                });
                            })
                            ->live()
                            ->afterStateUpdated(function ($state, callable $set) {
                                if ($state) {
                                    $reward = \App\Models\LoyaltyReward::find($state);
                                    if ($reward) {
                                        $set('redeem_points', $reward->point_cost);
                                        $set('redemption_description', $reward->reward_name . ' - ' . ($reward->description ?: 'Reward redemption'));
                                    }
                                } else {
                                    // Clear fields when no reward is selected
                                    $set('redeem_points', null);
                                    $set('redemption_description', null);
                                }
                            })
                            ->disabled(fn (Get $get): bool => !$get('loyalty_program_id_redeem'))
                            ->helperText('Select a predefined reward or leave blank to enter points manually'),

                        Placeholder::make('reward_details')
                            ->label('Selected Reward Details')
                            ->content(function (Get $get) {
                                $rewardId = $get('reward_id');
                                if (!$rewardId) {
                                    return 'No reward selected - manual entry mode';
                                }

                                $reward = \App\Models\LoyaltyReward::find($rewardId);
                                if (!$reward) {
                                    return 'Reward not found';
                                }

                                $details = [
                                    "Points Required: " . number_format($reward->point_cost),
                                    "Type: " . ucfirst($reward->reward_type),
                                ];

                                if ($reward->description) {
                                    $details[] = "Description: " . $reward->description;
                                }

                                if ($reward->discount_percentage) {
                                    $details[] = "Discount: " . $reward->discount_percentage . "%";
                                }

                                if ($reward->discount_value) {
                                    $details[] = "Discount Value: PHP " . number_format($reward->discount_value, 2);
                                }

                                if ($reward->expiration_days) {
                                    $details[] = "Valid for: " . $reward->expiration_days . " days";
                                }

                                return implode("\n", $details);
                            }),

                        TextInput::make('redeem_points')
                            ->label('Points to Redeem')
                            ->numeric()
                            ->minValue(1)
                            ->required()
                            ->suffix('points')
                            ->helperText(fn (Get $get): string => 
                                $get('reward_id') 
                                    ? 'Points auto-filled from selected reward' 
                                    : 'Enter the number of points to redeem manually'
                            ),

                        Textarea::make('redemption_description')
                            ->label('Redemption Description')
                            ->placeholder('e.g., Free coffee, 10% discount, etc.')
                            ->required()
                            ->helperText(fn (Get $get): string => 
                                $get('reward_id') 
                                    ? 'Description auto-filled from selected reward' 
                                    : 'Describe what the customer is redeeming'
                            ),
                    ])
                    ->columns(2),

                // Customer Balance Check (always visible when customer is selected)
                Section::make('Customer Balance')
                    ->schema([
                        // Placeholder::make('current_balance_display')
                        //     ->label('Current Points Balance')
                        //     ->content(fn ($get, $livewire): string => 
                        //         $livewire->redemptionCustomerBalance !== null 
                        //             ? number_format($livewire->redemptionCustomerBalance) . ' points'
                        //             : 'Select customer to check balance'
                        //     )
                        Placeholder::make('current_balance_display')
                        ->label('Current Points Balance')
                        ->content(fn ($get, $livewire): string => 
                            !empty($livewire->redemptionCustomerTransactions)
                                ? number_format(collect($livewire->redemptionCustomerTransactions)->sum('balance')) . ' points'
                                : 'Select customer to check balance'
                        )

                            ->extraAttributes([
                                'class' => 'text-2xl font-bold text-blue-600'
                            ]),

                        Placeholder::make('redemption_validity')
                            ->label('Redemption Status')
                            ->content(function (Get $get, $livewire) {
                                $points = $get('redeem_points');
                                $balance = $livewire->redemptionCustomerBalance;
                                
                                if ($points && $balance !== null) {
                                    if ($balance >= $points) {
                                        return '✅ Sufficient points available';
                                    } else {
                                        return '❌ Insufficient points (Need ' . number_format($points - $balance) . ' more)';
                                    }
                                }
                                
                                return 'Enter points to check availability';
                            })
                            ->extraAttributes(function (Get $get, $livewire) {
                                $points = $get('redeem_points');
                                $balance = $livewire->redemptionCustomerBalance;
                                
                                if ($points && $balance !== null) {
                                    $color = $balance >= $points ? 'text-green-600' : 'text-red-600';
                                    return ['class' => "font-semibold $color"];
                                }
                                
                                return ['class' => 'text-gray-500'];
                            }),
                    ])
                    ->columns(2)
                    ->visible(fn (Get $get): bool => 
                        !empty($get('redeem_customer_id')) || !empty($get('redeem_customer_email'))
                    ),

                Actions::make([
                    Action::make('check_balance')
                        ->label('Check Customer Balance')
                        ->icon('heroicon-o-banknotes')
                        ->color('info')
                        ->action('checkRedemptionCustomerBalance')
                        ->visible(fn (Get $get): bool => 
                            !empty($get('redeem_customer_id')) || !empty($get('redeem_customer_email'))
                        )
                        ->disabled(fn (Get $get): bool =>
                            empty($get('redeem_company_id')) ||
                            (empty($get('redeem_customer_id')) && empty($get('redeem_customer_email')))
                        ),

                    Action::make('generate_redemption_qr')
                        ->label('Generate Redemption QR')
                        ->icon('heroicon-o-qr-code')
                        ->color('warning')
                        ->action('generateRedemptionQr')
                        ->disabled(function (Get $get, $livewire) {
                            // Basic validation
                            if (empty($get('redeem_company_id')) ||
                                empty($get('loyalty_program_id_redeem')) ||
                                (empty($get('redeem_customer_id')) && empty($get('redeem_customer_email'))) ||
                                empty($get('redeem_points')) ||
                                empty($get('redemption_description'))) {
                                return true;
                            }

                            // Check if customer has sufficient balance
                            $points = $get('redeem_points');
                            $balance = $livewire->redemptionCustomerBalance;
                            
                            return $balance !== null && $balance < $points;
                        })
                        ->requiresConfirmation()
                        ->modalHeading('Generate Redemption QR')
                        ->modalDescription('This will generate a QR code. Scanning it will confirm the point redemption.'),
                ])->alignEnd(),
            ]);
    }
}